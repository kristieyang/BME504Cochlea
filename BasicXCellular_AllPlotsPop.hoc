load_file("nrngui.hoc")
load_proc("nrnmainmenu")

create node[1]
objref nodes
vinit = -65        //initial potential
D = 1.5 //µm
INL = 100*D        // internodal length µm

// initialize axon-----------------------------------------------
proc buildaxon() {local k
    nnode = $1
    create node[nnode]
    nodes = new SectionList()
    forsec "node" nodes.append
    access node[0]
    for k = 0, nnode-2{
        connect node[k+1](1),node[k](0)
    }
    finitialize(vinit)
}
// axon physical properties--------------------------------------
proc physprop(){
    forsec nodes{
        
        diam = 0.7*D //µm
        L = 1 // nodal length in µm
        nseg = 1
        define_shape()
    }
}
// membrane properties-------------------------------------------
proc membprop(){
    
    forsec nodes{
        insert hh
        insert extracellular
        Rm = 1000
        rhoa = 100      // axial resistivity (ohm-cm)
        Ra = rhoa*((INL+L)/L)
        cm = 2
    }
    
}

// build, connect, change properties, set membrane dynamics-----
proc make(){
    buildaxon($1)
    physprop()
    membprop()
}

make(7)

// Extracellular Potential Calculations-------------------------

// read data file---------------------------------------
objref rdistfile, rdistmat
NROW = 950
NCOL = nnode
rdistfile = new File("rdistm.txt")
rdistmat = new Matrix()
rdistfile.ropen()
o = rdistmat.scanf(rdistfile,NROW,NCOL)
 

// ----------------------------------------------------

objref pos_nx, pos_ny, pos_nz
pos_nx = new Vector(nnode,0)
pos_ny = new Vector(nnode,0)
pos_nz = new Vector(nnode,0)

for i=0, nnode-1{
    pos_nx.set(i, L*(i+1)+i*INL) // position vector of all the nodes
    //print L*(i+1)+i*INL
}
//pos_nx.mul(1e-3) //convert from um to mm



//dummy stimulus only to control waveform parameters
//The 'dummy' section has nothing to do with the fiber


// set electrode stim *******************************************
AMP = -0.03
DUR = .45
DEL = 4
tstop = 20

// set electrode pos --------------------------------------------
rho = 500 //Ohm cm //ex_resistivity


// end set electrode stim ---------------------------------------

objref dummystim
create dummy
dummy dummystim = new IClamp(0.5)	// 0.5 is the normalized location
dummystim.del = DEL
dummystim.dur = DUR



// extracellular potentials
objref phi_e, phi_ex, vm, APfile, VmMatrix, rmat, mobj, vecCurrent

VmMatrix = new Matrix(NROW,tstop/dt+1)
APfile=new File()
APfile.wopen("Vm_Test.txt")

rmat = new Matrix(NROW,NCOL)
phi_e = new Vector(nnode,0)
phi_ex = new Vector(nnode,0)
proc potential_field(){
        for i=0, nnode-1{
            r = rdistmat.getval($1,i)
            //r = sqrt((pos_nx.get(i) - XE)^2 + (pos_ny.get(i) - YE)^2 + (pos_nz.get(i) - ZE)^2) //um
            phi_e.x[i] = dummystim.i * (rho / 4 / PI)*(1/r)*10^4 // mV
            node[i].e_extracellular(0.5) = phi_e.x[i]
            phi_ex.set(i,AMP * (rho / 4 / PI)*(1/r)*10^4)
        }
}

vm = new Vector(tstop/dt,0)
vm.record(&node[nnode-1].v(0.5))
vecCurrent = new Vector(tstop/dt,0)
vecCurrent.record(&dummystim.i)

// time integrate with constant time step size (intrinsic dt)----
proc stimulate(){
	finitialize(vinit)

        for numrow = 0, NROW-1 {
            t = 0
            finitialize(vinit)
            while (t<tstop) {
                if (t >= DEL){
                    if (t-DEL < (DUR-.05)/2){
                        dummystim.amp = AMP
                    }else if (t-DEL <= (DUR+.05)/2){
                        dummystim.amp = 0
                    }else if (t-DEL > (DUR+.05)/2 && t-DEL <= DUR) {
                        dummystim.amp = -AMP
                    }
                }
                potential_field(numrow)
                fadvance()
            }
            // for recording membrane potentials
            VmMatrix.setrow(numrow, vm)
        }
        VmMatrix.fprint(0,APfile)
        APfile.close()

}



// Run stimulation through time----------------------------------

stimulate()



// *****************************PLOTTING************************************

// Membrane Voltage plot over Time for Nodes 10 and 15--------------------

objref g
g = new Graph()
g.size(0,tstop,vinit-10,70)
vecCurrent.plot(g,dt)
vm.plot(g,dt,2,1)

// Extracellular potential vs distance at some time during Stimulation----
objref vec, g2
g2 = new Graph()
g2.size(0, L*(nnode)+(nnode-1)*INL, -70,10)
vec = phi_ex
vec.plot(g2, pos_nx, 3,2)


// Spatial Plot at t = DUR+DEL--------------------------------------------
objref rvp, g4
proc snapshot(){

tstop = DEL+DUR

stimulate()
rvp = new RangeVarPlot("v")
node[0] rvp.begin(0)
node[nnode-1] rvp.end(1)

g4 = new Graph()
g4.addobject(rvp)
g4.size(rvp.left(),rvp.right(),-90,50)
    
}



// Spatial Plots at Multiple Time Points----------------------------------
/*
objref pos_vec, rvp2, vspace_mat, vspace_vec, f

proc spatialplots(){
    // show how node changes over time
    
    vspace_mat = new Matrix(9,305)
    vspace_vec = new Vector(9)
    count = 0
    for(k = DEL/dt; k < (DEL+DUR+9)/dt-1; k = k + 50) {
        tstop = (k)*dt
        stimulate()
        
        rvp2 = new RangeVarPlot("v")
        node[0] rvp2.begin(0)
        node[nnode-1] rvp2.end(1)
        
        rvp2.to_vector(vspace_vec)
        vspace_mat.setrow(count,vspace_vec)
        count = count + 1
    }
    
    f=new File()
    f.wopen("Vm_AtONENode_OverALLTime.txt")
    vspace_mat.fprint(f)
    f.close()
    
    // end show how node changes over time
    
}

spatialplots()
*/
snapshot()

// End Spatial Plots------------------------------------------------------


