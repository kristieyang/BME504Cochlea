load_file("nrngui.hoc")
load_proc("nrnmainmenu")

create node[1], soma
objref nodes
vinit = -65        //initial potential
INL = 100*1.5        // internodal length µm

// initialize axon-----------------------------------------------
proc buildaxon() {local k
    nnode = $1
    create node[nnode]
    nodes = new SectionList()
    forsec "node" nodes.append
    access node[0]
    for k = 0, nnode-2{
        connect node[k+1](1),node[k](0)
    }
    // soma
    soma{
        nseg=1
        diam=25
        L=25
        Ra=150
        cm=1
        //insert pas
        //e_pas = -65
        insert hh
        insert extracellular
        define_shape()
        
    }
    connect soma(1), node[0](1)
    finitialize(vinit)
}


// axon physical properties--------------------------------------
proc physprop(){
    forsec nodes{
        D = 1.5 //µm
        diam = 0.7*D //µm
        L = 1 // nodal length in µm
        nseg = 1
        define_shape()
    }
}
// membrane properties-------------------------------------------
proc membprop(){
    
    forsec nodes{
        insert hh
        insert extracellular
        Rm = 1000
        rhoa = 100      // axial resistivity (ohm-cm)
        Ra = rhoa*((INL+L)/L)
        cm = 2
    }
    
}

// build, connect, change properties, set membrane dynamics-----
proc make(){
    buildaxon($1)
    physprop()
    membprop()
}

make(21)

// Extracellular Potential Calculations-------------------------

//for keeping track of node positions and Ve at nodes
objref pos_nx, pos_ny, pos_nz
pos_nx = new Vector(nnode,0)
pos_ny = new Vector(nnode,0)
pos_nz = new Vector(nnode,0)

for i=0, nnode-1{
    pos_nx.set(i, 25+L*(i+1)+i*INL) // position vector of all the nodes
    //print L*(i+1)+i*INL
}
//pos_nx.mul(1e-3) //convert from um to mm

// for recording membrane potentials
objref vm[nnode],vm_s
for i=0, nnode-1{
	 vm[i] = new Vector(tstop/dt,0)
     vm[i].record(&node[i].v(0.5))
}

vm_s = new Vector(tstop/dt,0)
vm_s.record(&soma.v(0.5))

//dummy stimulus only to control waveform parameters
//The 'dummy' section has nothing to do with the fiber

// set electrode stim *******************************************

AMP = -.025 //mA
DUR = .2
DEL = 4
//dt = 0.025
tstop = 20

// set electrode pos --------------------------------------------
rho = 500 //Ohm cm //ex_resistivity

     XE = 1535  // µm
     YE = 100  // µm
     ZE = 0  // µm

// end set electrode stim ---------------------------------------

objref dummystim
create dummy
dummy dummystim = new IClamp(0.5)	// 0.5 is the normalized location
dummystim.del = DEL
dummystim.dur = DUR
dummystim.amp = AMP

// extracellular potentials
objref phi_e, phi_ex
phi_e = new Vector(nnode,0)
phi_ex = new Vector(nnode,0)
proc potential_field(){
	for i=0, nnode-1{
		r = sqrt((pos_nx.get(i) - XE)^2 + (pos_ny.get(i) - YE)^2 + (pos_nz.get(i) - ZE)^2) //um
		phi_e.x[i] = dummystim.i * (rho / 4 / PI)*(1/r)*10^4 // mV
        node[i].e_extracellular(0.5) = phi_e.x[i]
        phi_ex.set(i,AMP * (rho / 4 / PI)*(1/r)*10^4)
	}
    soma.e_extracellular(0.5) = phi_e.x[0]
}

// time integrate with constant time step size (intrinsic dt)----
proc stimulate(){
	finitialize(vinit)
	while (t<tstop) {	
		potential_field()
	  fadvance()
	}
    /*
	t = 0
    SetElectrodeToFiber(705,100,0) //*****SET XYZ in um*********************
	finitialize(vinit)
	while (t<tstop) {
		potential_field()
        fadvance()
    }
    t = 0
    SetElectrodeToFiber(0,100,0) //*****SET XYZ in um*********************
	finitialize(vinit)
	while (t<tstop) {
		potential_field()
        fadvance()
    }
     */
}



// Run stimulation through time----------------------------------

stimulate()




// *****************************PLOTTING************************************

// Membrane Voltage plot over Time for Nodes 10 and 15--------------------

objref g
g = new Graph()
g.size(0,tstop,vinit-10,70)
vm[10].plot(g,dt)
vm_s.plot(g,dt,2,2)
vm[1].plot(g,dt,2,1)

// Extracellular potential vs distance at some time during Stimulation----
objref vec, g2
g2 = new Graph()
g2.size(0, 2680, -70,10)
vec = phi_ex
vec.plot(g2, pos_nx, 3,2)

// Spatial Plot at t = DUR+DEL--------------------------------------------
objref rvp, g4
proc snapshot(){

tstop = DEL+DUR

stimulate()
rvp = new RangeVarPlot("v")
node[0] rvp.begin(0)
node[20] rvp.end(1)

g4 = new Graph()
g4.addobject(rvp)
g4.size(rvp.left(),rvp.right(),-90,50)
    
}



// Spatial Plots at Multiple Time Points----------------------------------
objref pos_vec, rvp2, vspace_mat, vspace_vec, f

proc spatialplots(){
    // show how node changes over time
    
    vspace_mat = new Matrix(9,43)
    vspace_vec = new Vector(9)
    counter = 0
    for(k = DEL/dt; k < (DEL+DUR+9)/dt-1; k = k + 50) {
        tstop = (k)*dt
        stimulate()
        
        rvp2 = new RangeVarPlot("v")
        node[0] rvp2.begin(0)
        node[20] rvp2.end(1)
        
        rvp2.to_vector(vspace_vec)
        vspace_mat.setrow(counter,vspace_vec)
        counter = counter + 1
    }
    
    f=new File()
    f.wopen("Vm_AtONENode_OverALLTime.txt")
    vspace_mat.fprint(f)
    f.close()
    
    // end show how node changes over time
    
}

spatialplots()
snapshot()


// End Spatial Plots------------------------------------------------------


