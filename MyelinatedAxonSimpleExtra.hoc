//Myelinated Axon, Perfect Insulator, With Extra Stim
//based on Modeling extracellular stimulation and recording with NEURON
//by Ted
//http://www.neuron.yale.edu/ftp/ted/neuron/extracellular_stim_and_rec.zip

load_file("nrngui.hoc")
load_proc("nrnmainmenu")

create node[1]
objref nodes

vinit = -65 //mV
// buildaxon creates an axon that has 21 compartments, 20 nodes

/* 
//Define stimulus parameters
PW = 0.1        //pulse width in ms
DELAY = 1       //in ms
E2F_Dist = 1    //electrode to fiber distance in mm
AMP =
*/

proc buildaxon() {local k
    nnode = $1
    create node[nnode]
    nodes = new SectionList()
    forsec "node" nodes.append
    access node[0]
    for k = 0, nnode-2{
        connect node[k+1](1),node[k](0)
    }
}

proc physprop(){
    forsec nodes{
        diam = 0.7*1.4//um
        l = 1//µm
        L = 100*1.4 //µm
        nseg = 15
        define_shape()
    }
}

proc membprop(){
    
    forsec nodes{
        insert hh
        insert extracellular
        Rm = 1000
        Ra = 100*((l+L)/l)/1e4
        cm = 2
    }
    
}


proc make() {
    buildaxon($1)
    physprop()
    membprop()
}

make(21) //create 21 nodes and 20 internodes



objref pos_nx, pos_ny, pos_nz
pos_nx = new Vector(nnode-1)
pos_ny = new Vector(nnode-1)
pos_nz = new Vector(nnode-1)

for i= 0, nnode-2 {
    pos_nx.set(i, l*(i+1)+i*L)
    pos_ny.set(i, 0)
    pos_nz.set(i, 0)
}


// set electrode stim *****

AMP = -.1 //mA
DUR = 1
DEL = 1
dt = 0.01
tstop = 10
objref Istep

Istep = new Vector(tstop/dt)

for i = 0, tstop/dt-1 {
        
    if (i <= (DEL+DUR)/dt && i >= DEL/dt){
        Istep.set(i,AMP)
    }else {
        Istep.set(i,0)
    }
}

// end set electrode stim *****


// set electrode pos *******

rho = 70 //Ohm cm //ex_resistivity

XE = 1410  // µm
YE = 100  // µm
ZE = 0    // µm

objref dist_r, xtra_pot,ve
dist_r = new Vector(nnode-1)
xtra_pot = new Vector(nnode-1)
ve = new Matrix(nnode-1, tstop/dt+1)

/*
//come back to this extracell stim if necessary
for k = 0, nnode-2 {
    dist = sqrt((pos_nx.get(k) - XE)^2 + (pos_ny.get(k) - YE)^2 + (pos_ny.get(k) - ZE)^2)
    dist_r.set(k,dist)
    for j = 0, (tstop/dt){
    dummyve =
    ve.setval(j,k) = (Istep.get(j) * rho / 4 / PI)*(1/dist)*10^4
    xtra_pot.set(k,ve)
    }
}
 */

// end set electrode pos ******

/*// extracellular potentials
proc potential_field(){
	for i=0, nnode-1{
		r = sqrt((pos_nx.get(k) - XE)^2 + (pos_ny.get(k) - YE)^2 + (pos_ny.get(k) - ZE)^2)
		phi_e.x[i] = (Istep.get() * rho / 4 / PI)*(1/dist)*10^4 // check units!!!!
		node[i].e_extracellular(0.5) = phi_e.x[i]
	}
}

// time integrate with constant time step size
proc stimulate(){
	finitialize(Vo)
	while (t<tstop) {
		potential_field()
        fadvance()
	}
}
 */


for j = 0, nnode-2 {
    access node[j]
    node[j].e_extracellular(1) = xtra_pot.get(j)
    print e_extracellular
}

objref vec, g2
g2 = new Graph()
g2.size(0, 2680, -70,10)
vec = xtra_pot
vec.plot(g2, pos_nx, 3,2)

objref p, vnodes
p = new Graph()
p.size(0,tstop,-90,100)
vnodes = new Vector()

vnodes.record(&node[11].v(1))

run()
vnodes.plot(p,dt,3,2)

objectvar rvp, g

rvp = new RangeVarPlot("v")
node[0] rvp.begin(0)
node[20] rvp.end(1)
g = new Graph()
g.addobject(rvp)
g.size(rvp.left(), rvp.right(),-90,50)

