//Myelinated Axon, Perfect Insulator, With Extra Stim and Additional Plots
//based on Modeling extracellular stimulation and recording with NEURON
//by Ted
//http://www.neuron.yale.edu/ftp/ted/neuron/extracellular_stim_and_rec.zip
load_file("nrngui.hoc")
load_proc("nrnmainmenu")

create node[1]
objref nodes

vinit = -65 //mV
// buildaxon creates an axon that has 21 compartments, 20 nodes

proc buildaxon() {local k
    nnode = $1
    create node[nnode]
    nodes = new SectionList()
    forsec "node" nodes.append
    access node[0]
    for k = 0, nnode-2{
        connect node[k+1](1),node[k](0)
    }
}

proc physprop(){
    forsec nodes{
        diam = 0.7*1.4//um
        l = 1//µm
        L = 100*1.4 //µm
        nseg = 15
        define_shape()
    }

}

proc membprop(){
    
    forsec nodes{
        insert hh
        insert extracellular
        Rm = 1000
        Ra = 10000*((l+L)/l)/1e4
        cm = 2
    }
    
}

proc make() {
    buildaxon($1)
    physprop()
    membprop()
}

make(21) //create 21 nodes and 20 internodes

// set electrode stim *****
AMP = -0.1 //mA
DUR = 3
DEL = 1
//dt = 0.025
tstop = 20
// end set electrode stim *****

objref dummystim
create dummy
dummy dummystim = new IClamp(0.5)   //middle
dummystim.del = DEL
dummystim.dur = DUR
dummystim.amp = AMP

// set electrode pos *******
rho = 70 //Ohm cm //ex_resistivity

XE = 1410  // µm
YE = 100  // µm
ZE = 0    // µm//Define electrode position

objref pos_nx, pos_ny, pos_nz
//pos_nx = new Vector(nnode-1)
//pos_ny = new Vector(nnode-1)
//pos_nz = new Vector(nnode-1)

pos_nx = new Vector(nnode,0)
pos_ny = new Vector(nnode,0)
pos_nz = new Vector(nnode,0)

for i= 0, nnode-1 {
    pos_nx.set(i, l*(i+1)+i*L)
    pos_ny.set(i, 0)
    pos_nz.set(i, 0)
}

objref dist_r, phi_e, phi_et, phi_ex
dist_r = new Vector(nnode-1)
phi_e = new Vector(nnode,0)
phi_et = new Vector(tstop/dt,0)
phi_ex = new Vector(nnode)

// extracellular potentials
proc potential_field(){
	for i=0, nnode-1{
		r = sqrt((pos_nx.get[i] - XE)^2 + (pos_ny.get[i] - YE)^2 + (pos_nz.get[i] - ZE)^2)
		phi_e.x[i] = dummystim.i * (rho / 4 / PI)*(1/r)*10^4
		node[i].e_extracellular(0.5) = phi_e.x[i]
        if (t == 2){
            phi_ex.x[i] = phi_e.x[i]
        }
	}
    phi_et.x[t/dt] = phi_e.x[10]
}

// time integrate with constant time step size
proc stimulate(){
	finitialize(vinit)
	while (t<tstop) {
        potential_field()
        fadvance()
	}
}

// RUN THE CODE
stimulate()

objref vol_mem[nnode]
for k = 0, nnode-1{
    vol_mem[k] = new Vector(tstop/dt,0)
    vol_mem[k].record(&node[k].v(0.5))
}

objref pos_vec, rvp2, vspace_mat, vspace_vec, g3, vnode2, f

/*proc spatialplots(){
    // show how node changes over time
    
    pos_vec = new Vector(pos_nx.get(nnode-1))
    for i=0, pos_vec.size()-1 {
        pos_vec.set(i,i)
    }
    
    vspace_mat = new Matrix(int(((DUR+9)/dt)/50)+2,pos_vec.size()-1)
    vspace_vec = new Vector(pos_vec.size()-1)
    vnode2 = new Vector()
    node_num = 11
    access node[node_num]
    count = 0
    stimulate()
    
    for(k = DEL/dt; k < (DEL+DUR+9)/dt-1; k = k + 50) {
        tstop = (k)*dt
        
        rvp2 = new RangeVarPlot("v")
        node[0] rvp2.begin(1)
        node[20] rvp2.end(0)
        
        g3 = new Graph()
        g3.addobject(rvp2)
        g3.size(rvp2.left(),rvp2.right(),-90,50)
        rvp2.to_vector(vspace_vec)
        vspace_mat.setrow(count,vspace_vec)
        count = count + 1
    }
    
    f=new File()
    f.wopen("Vm_AtONENode_OverALLTime.txt")
    vspace_mat.fprint(f)
    f.close()
    
    // end show how node changes over time
    
}

spatialplots()
*/


//PLOTTING

// Extracellular potential vs. time at one node
objref vec1, g1
g1 = new Graph()
g1.size(0,tstop,vinit,90)
vec1 = phi_et
vec1.plot(g1,dt,2,1)

// Extracellular potential vs distance at one time point
objref vec, g2
g2 = new Graph()
g2.size(0, 2680, -70,10)
vec = phi_ex
vec.plot(g2, pos_nx, 3,2)
// end Matt's plot

//Plot Vm
objref g
g = new Graph()
g.size(0,tstop,vinit-20,60)
vol_mem[10].plot(g,dt)