//Myelinated Axon, Perfect Insulator, With Extra Stim and Additional Plots
//based on Modeling extracellular stimulation and recording with NEURON
//by Ted
//http://www.neuron.yale.edu/ftp/ted/neuron/extracellular_stim_and_rec.zip
load_file("nrngui.hoc")
load_proc("nrnmainmenu")

create node[1]
objref nodes

vinit = -65 //mV
// buildaxon creates an axon that has 21 compartments, 20 nodes

proc buildaxon() {local k
    nnode = $1
    create node[nnode]
    nodes = new SectionList()
    forsec "node" nodes.append
    access node[0]
    for k = 0, nnode-2{
        connect node[k+1](1),node[k](0)
    }
}

proc physprop(){
    forsec nodes{
        diam = 0.7*1.4//um
        l = 1//µm
        L = 100*1.4 //µm
        nseg = 15
        define_shape()
    }

}

proc membprop(){
    
    forsec nodes{
        insert hh
        insert extracellular
        Rm = 1000
        Ra = 10000*((l+L)/l)/1e4
        cm = 2
    }
    
}


proc make() {
    buildaxon($1)
    physprop()
    membprop()
}

make(21) //create 21 nodes and 20 internodes



objref pos_nx, pos_ny, pos_nz
pos_nx = new Vector(nnode-1)
pos_ny = new Vector(nnode-1)
pos_nz = new Vector(nnode-1)

for i= 0, nnode-2 {
    pos_nx.set(i, l*(i+1)+i*L)
    pos_ny.set(i, 0)
    pos_nz.set(i, 0)
}


// set electrode stim *****

AMP = -.1 //mA
DUR = 3
DEL = 1
dtime = 0.025
ttot = 20
tstop = ttot

objref Istep

Istep = new Vector(tstop/dtime)

for i = 0, tstop/dtime-1 {
        
    if (i <= (DEL+DUR)/dtime && i >= DEL/dtime){
        Istep.set(i,AMP)
    }else {
        Istep.set(i,0)
    }
}

// end set electrode stim *****


// set electrode pos *******

rho = 70 //Ohm cm //ex_resistivity

XE = 1410  // µm
YE = 100  // µm
ZE = 0    // µm

objref dist_r, xtra_pot
dist_r = new Vector(nnode-1)
xtra_pot = new Vector(nnode-1)

// Point in time over Space
for k = 0, nnode-2 {
    dist = sqrt((pos_nx.get(k) - XE)^2 + (pos_ny.get(k) - YE)^2 + (pos_ny.get(k) - ZE)^2)
    dist_r.set(k,dist)
    ve = (AMP * rho / 4 / PI)*(1/dist)*10^4
    xtra_pot.set(k,ve)
    print xtra_pot.get(k)
}


// end set electrode pos ******


// Point in Space over time ****
objref dist_at_node
dist_at_node = new Vector(nnode-1)
objref xtra_pot_at_node
xtra_pot_at_node = new Matrix(tstop/dtime,nnode-1)


for j = 0, nnode-2 {
    node_num = j
    dist_at_node.set(j,sqrt((pos_nx.get(node_num) - XE)^2 + (pos_ny.get(node_num) - YE)^2 + (pos_ny.get(node_num) - ZE)^2))
    
    for k = 0, tstop/dtime-1 {
        ve = Istep.get(k) * (rho / 4 / PI)*(1/dist_at_node.get(j))*10^4
        //ve = AMP * (rho / 4 / PI)*(1/dist_at_node.get(j))*10^4
        xtra_pot_at_node.setval(k,j,ve)
    }
}

objref f
f=new File()
f.wopen("Ve_AtNode_OverTime.txt")
xtra_pot_at_node.fprint(f)
f.close()

// end point in Space over time ****


// plot extracellular pot at each node
/*
for j = 0, nnode-2 {
    access node[j]
    time_point = (DUR+DEL)/dtime-1
    //tstop = time_point
    node[j].e_extracellular(0) = xtra_pot_at_node.getval(time_point,j)
}
*/


// Matt's plot
objref vec, g2
g2 = new Graph()
g2.size(0, 2680, -70,10)
vec = xtra_pot
vec.plot(g2, pos_nx, 3,2)
// end Matt's plot

// end plot extracellular pot at each node


objref p, vnodes
p = new Graph()
p.size(0,tstop,-90,100)
vnodes = new Vector()
vnodes.record(&node[11].v(1))
run()
vnodes.plot(p,dtime,3,2)
print "size:"
print vnodes.size()


// show how node changes over time
/*
objref pos_vec
pos_vec = new Vector(pos_nx.get(nnode-2))

for i=0, pos_vec.size()-1 {
    pos_vec.set(i,i)
}

objref rvp2, vspace_mat, vspace_vec, g3,vnode2
vspace_mat = new Matrix(int(((DUR+9)/dtime)/50)+2,pos_vec.size()-1)
vspace_vec = new Vector(pos_vec.size()-1)
vnode2 = new Vector()

node_num = 11
access node[node_num]
count = 0

for(k = DEL/dtime; k < (DEL+DUR+9)/dtime-1; k = k + 50) {
    tstop = (k)*dtime
    
    if (k < (DEL+DUR)/dtime){
        for i=0,nnode-2 {
            node[i].e_extracellular(1) = xtra_pot_at_node.getval(k,i)
        }
    }
    run()
    
    rvp2 = new RangeVarPlot("v")
    node[0] rvp2.begin(1)
    node[20] rvp2.end(0)
    
    g3 = new Graph()
    g3.addobject(rvp2)
    g3.size(rvp2.left(),rvp2.right(),-90,50)

    rvp2.to_vector(vspace_vec)
    vspace_mat.setrow(count,vspace_vec)
    count = count + 1
}

objref f
f=new File()
f.wopen("Vm_AtONENode_OverALLTime.txt")
vspace_mat.fprint(f)
f.close()
*/
// end show how node changes over time



// write Vm matrix --> matlab
/*
objref vnode, vnode_mat
vnode_mat = new Matrix(tstop/dtime+1,nnode-1)
vnode     = new Vector(tstop/dtime+1)

for j = 0, nnode-2 {
    for k = 0, tstop/dtime-1 {
        access node[j]
        node[j].e_extracellular(1) = xtra_pot_at_node.getval(k,j)
    }
    vnode.record(&node[j].v(.5))
    run()
    vnode_mat.setcol(j,vnode)
}

objref f
f=new File()
f.wopen("Vm_AtNode_OverTime.txt")
vnode_mat.fprint(f)
f.close()
*/
 
// end write Vm matrix --> matlab

objectvar rvp, g

rvp = new RangeVarPlot("v")
node[0] rvp.begin(0)
node[20] rvp.end(1)
g = new Graph()
g.addobject(rvp)
g.size(rvp.left(),rvp.right(),-90,50)

