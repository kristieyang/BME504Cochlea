load_file("nrngui.hoc")
load_proc("nrnmainmenu")

create node[1], internode[1]
objref nodes, internodes

vinit = -65 //mV
// buildaxon creates an axon that has 21 compartments, 20 nodes

proc buildaxon() {local k
    nnode = $1
    create node[nnode], internode[nnode-1]
    nodes = new SectionList()
    internodes = new SectionList()
    forsec "internode" internodes.append
    forsec "node" nodes.append


    access node[0]
    for k = 0, nnode-2 {
        connect internode[k](0),node[k](1)
        connect node[k+1](0),internode[k](1)
    }
    
    forsec internodes {nseg = 10}

}

proc membprop(){

    forsec nodes {
        Ra = 100 //*
        cm = 2   //*
        L = 1.5 //µm
        insert hh
        insert extracellular {
            xg[0]=1e10
            xg[1]=1e10
            xc[0]=0
            xc[1]=0
            xraxial[0]=1e20
            xraxial[1]=1e20
            e_extracellular=0
        }
    }

    
    forsec internodes {
        insert pas
        g_pas = 0.0002
        e_pas = -70.0
        diam = 0.7*1.4  //Axon diameter, µm
        L = 100*1.4     //Internode length
        Ra = 100 //*
        cm = 0   //*
        insert extracellular {
            xg[0]=1e9
            xg[1]=1e9
            xc[0]=0
            xc[1]=0
            xraxial[0]=1e20
            xraxial[1]=1e20
            e_extracellular=0
        }
    }

}

// build the cell
proc make() {
    buildaxon($1)
    membprop()
}

make(21) //create 21 nodes and 20 internodes//interpxyz.hoc **************

// original data, irregularly spaced
objref xx, yy, zz, length
// interpolated data, spaced at regular intervals
objref xint, yint, zint, range, xr, x_xtra, y_xtra

proc grindaway() { local ii, nn, kk, xr
	forall {
        if (ismembrane("xtra")) {
            // get the data for the section
            nn = n3d()
            xx = new Vector(nn)
            yy = new Vector(nn)
            zz = new Vector(nn)
            length = new Vector(nn)
            
            for ii = 0,nn-1 {
                xx.x[ii] = x3d(ii)
                yy.x[ii] = y3d(ii)
                zz.x[ii] = z3d(ii)
                length.x[ii] = arc3d(ii)
            }
            
            // to use Vector class's .interpolate()
            // must first scale the independent variable
            // i.e. normalize length along centroid
            length.div(length.x[nn-1])
            
            // initialize the destination "independent" vector
            range = new Vector(nseg+2)
            range.indgen(1/nseg)
            range.sub(1/(2*nseg))
            range.x[0]=0
            range.x[nseg+1]=1
            
            // length contains the normalized distances of the pt3d points
            // along the centroid of the section.  These are spaced at
            // irregular intervals.
            // range contains the normalized distances of the nodes along the
            // centroid of the section.  These are spaced at regular intervals.
            // Ready to interpolate.
            
            xint = new Vector(nseg+2)
            yint = new Vector(nseg+2)
            zint = new Vector(nseg+2)
            xint.interpolate(range, length, xx)
            yint.interpolate(range, length, yy)
            zint.interpolate(range, length, zz)
            
            // for each node, assign the xyz values to x_xtra, y_xtra, z_xtra
            //		for ii = 0, nseg+1 {
            // don't bother computing coords of the 0 and 1 ends
            // also avoid writing coords of the 1 end into the last internal node's coords
            print "nseg"
            print nseg
            for ii = 1, nseg {
                xr = range.x[ii]
                print "xr:"
                print xr
                x_xtra(xr) = xint.x[ii]
                y_xtra(xr) = yint.x[ii]
                z_xtra(xr) = zint.x[ii]
            }
        }
	}
}


// interpxyz.hoc **************

DEL = 1  // ms
DUR = 1
AMP = 10000  // mA

objref stim_amp, stim_time
stim_amp = new Vector()
stim_time = new Vector()

proc stim_waveform() {
    // this uses interpolated play
    // index    0  1    2    3        4        5
    // stim vec 0, 0,   1,   1,       0        0
    // time vec 0, DEL, DEL, DEL+DUR, DEL+DUR, DEL+DUR+1
    //  really  0, $1,  $1,  $1+$2,   $1+$2,   $1+$2+1
    // first the stim vector
    stim_amp.resize(6)
    stim_amp.fill(0)
    stim_amp.x[2]=1
    stim_amp.x[3]=1
    stim_amp.mul($3)
    // now the time vector
    stim_time.resize(6)
    stim_time.x[1]=$1
    stim_time.x[2]=$1
    stim_time.x[3]=$1+$2
    stim_time.x[4]=$1+$2
    stim_time.x[5]=$1+$2+1
}

proc setstim() {
    del = $1
    dur = $2
    amp = $3
    stim_waveform(del, dur, amp)
}


setstim(DEL, DUR, AMP)
xpanel("Extracellular Stimulus Current", 0)
xvalue("del (ms)", "DEL", 1, "setstim(DEL,DUR,AMP)", 0, 1)
xvalue("dur (ms)", "DUR", 1, "setstim(DEL,DUR,AMP)", 0, 1)
xvalue("amp (mA)", "AMP", 1, "setstim(DEL,DUR,AMP)", 0, 1)
xpanel(73,497)

//ex_resistivity
rho = 70 //Ohm cm

XE = 50  // um
YE = 1
ZE = 0

objref rx_xtra
rx_xtra = new Vector()
print "before loop"

proc setrx() {
    forall {
        //if (ismembrane("xtra")) {
            // avoid nodes at 0 and 1 ends, so as not to override values at internal nodes
            for (x,0) {
                print x
                print x_xtra(0)
                r = sqrt((x_xtra(x) - xe)^2 + (y_xtra(x) - ye)^2 + (z_xtra(x) - ze)^2)
                //        r = sqrt((x_xtra(x) - $1)^2 + (y_xtra(x) - $2)^2 + (z_xtra(x) - $3)^2)
                // 0.01 converts rho's cm to um and ohm to megohm
                rx_xtra.x[x] = (rho / 4 / PI)*(1/r)*0.01
                print "here"
            }
        //}
    }
}



objref rvp2, g2

rvp2 = new RangeVarPlot("rx_xtra")
node[1] rvp2.begin(0)
node[20] rvp2.end(1)
g2 = new Graph()
g2.addobject(rvp2,3,2)
g2.size(rvp2.left(), rvp2.right(),-200,200)


create sElec  // bogus section to show extracell stim/rec electrode location
objref pElec  // bogus PointProcess just to show stim location
objref gElec  // will be a Shape that shows extracellular electrode location

gElec = new Shape(0)  // create it but don't map it to the screen yet

proc drawelec() {
	sElec {
		// make it 1 um long
		pt3dclear()
		pt3dadd($1-0.5, $2, $3, 1)
		pt3dadd($1+0.5, $2, $3, 1)
		pElec = new IClamp(0.5)
	}
	gElec.point_mark(pElec, 2)  // make it red
}

proc setelec() {
	xe = $1
	ye = $2
	ze = $3
	setrx(xe, ye, ze)
	drawelec(xe, ye, ze)
}

setelec(XE, YE, ZE)   // put stim electrode at (x, y, z)

xpanel("Extracellular Electrode Location", 0)
xlabel("xyz coords in um")
xvalue("x", "XE", 1, "setelec(XE,YE,ZE)", 0, 1)
xvalue("y", "YE", 1, "setelec(XE,YE,ZE)", 0, 1)
xvalue("z", "ZE", 1, "setelec(XE,YE,ZE)", 0, 1)
xpanel(855,204)




//Create an intracellular stimulus
//objectvar stim
//node[10] stim = new IClamp(0.5)
//stim.del = 1   //Apply stimulus immediately
//stim.dur = .2    //Stimulus duration = 200 us
//stim.amp = 10  //2*Vth to evoke AP (units of nA)

tstop = 2

objref p, vnodes, vinternodes
p = new Graph()
p.size(0,tstop,-90,100)
//p.label(0.3,0,"Time (ms)")
//p.label(0,0.5,"Current (mA/cm2)")
vnodes = new Vector()
vinternodes = new Vector()

vinternodes.record(&internode[10].v(.5))
vnodes.record(&node[10].v(.5))


run()
vnodes.plot(p,dt,3,2)
vinternodes.plot(p,dt,2,1)

objectvar rvp, g

rvp = new RangeVarPlot("v")
node[1] rvp.begin(0)
node[20] rvp.end(1)
g = new Graph()
g.addobject(rvp)
g.size(rvp.left(), rvp.right(),-90,50)

print rvp.left()
print rvp.right()
