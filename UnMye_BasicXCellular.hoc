load_file("nrngui.hoc")
load_proc("nrnmainmenu")

create myelin[1], unmyelin[1]
objref myelins, unmyelins, r
vinit = -65        //initial potential, mV

func round() {
    if ($1>0) {
        return int($1+0.5)
    } else {
        return int($1-0.5)
    }
}

objref randnum
randnum = new Vector(25,0)

myelins = new SectionList()
unmyelins = new SectionList()

proc unmyelinate() {
    nnode = $1
    r = new Random()
    r.uniform(0,1)
    num_mye = 1
    num_unmye = 1
    for i = 0, nnode-2 {
        randnum.set(i,round(r.repick()))
        print randnum.get(i)
        if (randnum.get(i) == 0) {
            create unmyelin[num_unmye]
            num_unmye = num_unmye+1
            
            Ra = 100
            cm = 2
            insert hh
            gnabar_hh = 1.2
            gkbar_hh = 0.36
            gl_hh = 0.003
            print "UnMY"
            
        } else {
            create myelin[num_mye]
            num_mye = num_mye+1
            
            cm = 0
            insert pas
            g_pas = 0.0002
            e_pas = -70.0
            print "MY"
            s
        }
        
    }
    finitialize(vinit)
    
    forsec "myelin" myelins.append
    forsec "unmyelin" unmyelins.append
    physprop()
    membprop()
}


// axon physical properties
proc physprop(){
    forsec myelins {
        D = 1.4 //internodal length in µm
        diam = 0.7*D //µm
        l = 1 //µm
        L = 100*D //µm
        nseg = 15
        define_shape()
    }
    forsec unmyelins {
        D = 1.4 //internodal length in µm
        diam = 0.7*D //µm
        l = 1 //µm
        L = 100*D //µm
        nseg = 15
        define_shape()
        
    }
}
// membrane properties
proc membprop(){
    
    forsec myelins {
        insert hh
        insert extracellular
        Rm = 1000
        rhoa = 100      // axial resistivity (ohm-cm)
        Ra = rhoa*((l+L)/l)
        cm = 2
    }
    
    forsec unmyelins {
        insert pas
        //insert extracellular
        Rm = 10000
        rhoa = 100
        Ra = rhoa*((l+L)/l)
        cm = 0   //*
    }
}


proc make(){
    unmyelinate($1)

}

make(25)

//for keeping track of node positions and Ve at nodes
objref pos_nx, pos_ny, pos_nz
pos_nx = new Vector(nnode,0)
pos_ny = new Vector(nnode,0)
pos_nz = new Vector(nnode,0)

for i=0, nnode-1{
    pos_nx.set(i, l*(i+1)+i*L) // position vector of all the nodes
}
//pos_nx.mul(1e-3) //convert from um to mm

// for recording membrane potentials
objref vm[nnode]
for i=0, num_mye-2{
	 vm[i] = new Vector(tstop/dt,0)
     vm[i].record(&myelin[i].v(0.5))
}

//dummy stimulus only to control waveform parameters
//The 'dummy' section has nothing to do with the fiber

// set electrode stim *****
AMP = -.03 //mA
DUR = .2
DEL = 4
//dt = 0.025
tstop = 20

// set electrode pos
rho = 500 //Ohm cm //ex_resistivity

XE = 1410  // µm
YE = 100  // µm
ZE = 0    // µm //Define electrode position

// end set electrode stim *****

objref dummystim
create dummy
dummy dummystim = new IClamp(0.5)	// 0.5 is the normalized location
dummystim.del = DEL
dummystim.dur = DUR
dummystim.amp = AMP

// extracellular potentials
objref phi_e, phi_ex
phi_e = new Vector(nnode,0)
phi_ex = new Vector(nnode,0)
proc potential_field(){
	for i=0, nnode-1{
		r = sqrt((pos_nx.get(i) - XE)^2 + (pos_ny.get(i) - YE)^2 + (pos_nz.get(i) - ZE)^2) //um. Note that we are assuming that the electrode is at position
		phi_e.x[i] = dummystim.i * (rho / 4 / PI)*(1/r)*10^4 // mV
        myelin[i].e_extracellular(0.5) = phi_e.x[i]
        phi_ex.set(i,AMP * (rho / 4 / PI)*(1/r)*10^4)
	}
    
}

// time integrate with constant time step size
proc stimulate(){
	finitialize(vinit)
	while (t<tstop) {	
		potential_field()
	  fadvance()		
	}	
}

// ----------------------- Plotting -----------------------------------------

stimulate()

objref g
g = new Graph()
g.size(0,tstop,vinit-10,70)
vm[10].plot(g,dt)
vm[12].plot(g,dt,2,1)

// Matt's Plot *******
/*
// Extracellular potential vs distance at one time point
objref vec, g2
g2 = new Graph()
g2.size(0, 2680, -70,10)
vec = phi_ex
vec.plot(g2, pos_nx, 3,2)

// End Matt's Plot *******


// Begin Spatial Plot at t = DUR+DEL

objref rvp, g4

tstop = DEL+DUR

stimulate()
rvp = new RangeVarPlot("v")
unmyelin[0] rvp.begin(0)
unmyelin[num_unmye-2] rvp.end(1)

g4 = new Graph()
g4.addobject(rvp)
g4.size(rvp.left(),rvp.right(),-90,50)


// End Spatial Plot at t = DUR+DEL

// Spatial Plots Begin *******

objref pos_vec, rvp2, vspace_mat, vspace_vec, f

proc spatialplots(){
    // show how node changes over time
    
    vspace_mat = new Matrix(9,305)
    vspace_vec = new Vector(9)
    count = 0
    for(k = DEL/dt; k < (DEL+DUR+9)/dt-1; k = k + 50) {
        tstop = (k)*dt
        stimulate()
        
        rvp2 = new RangeVarPlot("v")
        unmyelin[0] rvp2.begin(0)
        unmyelin[num_unmye-2] rvp2.end(1)
        
        rvp2.to_vector(vspace_vec)
        vspace_mat.setrow(count,vspace_vec)
        count = count + 1
    }
    
    f=new File()
    f.wopen("Vm_AtONENode_OverALLTime.txt")
    vspace_mat.fprint(f)
    f.close()
    
    // end show how node changes over time
    
}

spatialplots()
*/
// End Spatial Plots ******


